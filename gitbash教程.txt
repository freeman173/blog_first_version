
140.82.112.3








安装好

1、设置用户
进入gitbash命令行：设置用户。注意这个不是登录哦，是给你的电脑设置一个用户，等你上传的时候，告诉远程仓库是谁上传的而已。

git config --global user.name "Your Name"（注意前边是“- -global”，有两个横线）
git config --global user.email "email@example.com"



2、初始化本地仓库

2.1进入本地文件夹（可以提前把项目源码放进去）并打开gitbash：输入“git init”将其变成仓库。

2.2
github远端上建立一个仓库。




3、配置ssh连接


为了生成一个新的SSH Key，复制粘贴下面的文本，确保替换为你的电子邮件地址。默认设置是首选的，所以当你被

问到“输入一个文件来保存密钥”，只要按下回车键继续就行。

$ ssh-keygen -t rsa -C your-email

$ 询问保存目录，直接回车

下一步，你会被要求输入一个密码。

提示：我们强烈建议使用一个好的，安全的密码，到Working with SSH Key passphrases查看更多信息。

$ 输入密码

$ 再次输入密码，要求两次一致。

你应该会得到如下信息：

信息提示你生成成功，密钥保存在哪里，指纹码是多少。

然后添加你的密钥到ssh-agent.

$ eval `ssh-agent -s`

$ ssh-add ~/.ssh/id_rsa

这会要求你输入 生成密钥时的密码，反正我操作时提示了（这句是我加的）

第三步：添加你的SSH Key 到GitHub
运行以下命令复制key到你的剪贴板。

$ clip < ~/.ssh/id_rsa.pub

另一种选择，可以使用你最喜欢的文本编辑器，手动打开文件并复制内容到剪贴板。

现在你已经复制了密钥，是时候把它添加到GitHub了。

1、在任意GitHub页面顶部右角落用户面板处。点击Account settings.

2、点击左侧边栏SSH Keys按钮。

3、点击Add SSH Key

4、在标题域，为一个新的密钥添加一个描述，例如，如果你正在使用个人的MAC，你可以叫这个密钥“个上Mac Book...”

5、粘贴你的密钥到Key域。

6、点击Add Key

7、输入你的GitHub密码确认这个动作。

第四步：测试所有输出
确保所有事情正常运行，你现在要尝试一下SSH连接GitHub，当你做此动作时，你会被要求用你之前创建的密码来授权这

个动作。打开你的Git Bash，输入 ：

$ ssh -T git@github.com

#尝试用ssh连接github

你也许会看到如这样的警告：

..................

不要担心，意料之中，检验终端 中的指纹码是否和我们上面提供的指纹码。然后输入yes

提示信息，连接成功..................

如果用户名是你的用户名，你已经成功设置了你的SSH Key，不要担心"shell access"这个事，反正你不希望这样。








4、与远程仓库建立连接

4.1、在你的本地仓库打开gitbash并输入：git remote add + origin（推送名，可以随意取） + 远程仓库地址（……/vue…….git）
（添加之后没有任何提示，如果你想确定是否成功了，可以输入“git remote -v” 查看是否成功建立连接。）


4.2、
如果你以后不想连接这个远程仓库了，只需要输入git remote remove + 推送名。比如我刚才添加的远程仓库代称是origin，那我就要写：git remote remove origin



5、文件上传到远程仓库

5.1、
git add 将修改的文件添加暂存区，也就是将要提交的文件的信息添加到索引库中。

git add -A，提交所有变化。


5.2、
git commit 将当前暂存区的文件实际保存到仓库的历史记录中

git commit -m "修改注释"


5.3、推送文件
git push -u 仓库名称(推送名:origin)  分支名(第一次推送文件 ，只有一个分支master)
注：第一次推送文件 ，只有一个分支，名为master；加上 –u参数才会把本地的master分支和远程的master分支关联起来，就是告诉远程仓库的master分支，我的本地仓库和是对着你的哦，不是对着别的分支的哦。
只有第一次推的时候需要加上-u，以后的推送就可以省略掉-u参数了。




